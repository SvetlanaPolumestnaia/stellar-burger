// import { RequestStatus, TOrder } from '@utils-types';
// import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
// import { getOrdersApi } from '../utils/burger-api';
// import { RootState } from './store';

// export const sliceName = 'order';

// export interface TOrderState {
//   info: TOrder[] | null;
//   status: RequestStatus;
// }

// const initialState: TOrderState = {
//   info: null,
//   status: RequestStatus.Idle
// };

// export const orderSlice = createSlice({
//   name: sliceName,
//   initialState,
//   reducers: {},
//   extraReducers: (builder) => {
//     builder
//       .addCase(fetchOrders.pending, (state) => {
//         state.status = RequestStatus.Loading;
//       })
//       .addCase(fetchOrders.fulfilled, (state, action) => {
//         state.info = action.payload;
//         state.status = RequestStatus.Success;
//       })
//       .addCase(fetchOrders.rejected, (state, action) => {
//         state.status = RequestStatus.Failed;
//       });
//   }
// });

// export const fetchOrders = createAsyncThunk('orders/fetchOrders', async () => {
//   const response = await getOrdersApi();
//   return response;
// });

// export const selectOrders = (state: RootState): TOrder[] | null =>
//   state.order.info;

// export default orderSlice.reducer;
